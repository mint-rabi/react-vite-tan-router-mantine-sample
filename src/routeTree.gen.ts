/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as AboutRouteImport } from './routes/about/route'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const IdIndexLazyImport = createFileRoute('/$id/')()

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/dashboard/route.lazy').then((d) => d.Route),
)

const AboutRouteRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about/route.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const IdIndexLazyRoute = IdIndexLazyImport.update({
  id: '/$id/',
  path: '/$id/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/$id/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/$id/': {
      id: '/$id/'
      path: '/$id'
      fullPath: '/$id'
      preLoaderRoute: typeof IdIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRouteRoute
  '/dashboard': typeof DashboardRouteRoute
  '/$id': typeof IdIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRouteRoute
  '/dashboard': typeof DashboardRouteRoute
  '/$id': typeof IdIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutRouteRoute
  '/dashboard': typeof DashboardRouteRoute
  '/$id/': typeof IdIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/about' | '/dashboard' | '/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/dashboard' | '/$id'
  id: '__root__' | '/' | '/about' | '/dashboard' | '/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutRouteRoute: typeof AboutRouteRoute
  DashboardRouteRoute: typeof DashboardRouteRoute
  IdIndexLazyRoute: typeof IdIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutRouteRoute: AboutRouteRoute,
  DashboardRouteRoute: DashboardRouteRoute,
  IdIndexLazyRoute: IdIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/dashboard",
        "/$id/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about/route.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx"
    },
    "/$id/": {
      "filePath": "$id/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
